from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from keyboards.menu import main_menu
from states.booking import BookingStates
from services.services import services
from db.database import (
    save_appointment,
    get_user_appointments,
    is_time_range_available,
    delete_user_appointment,
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import datetime

router = Router()

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def service_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=s)] for s in services.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def date_keyboard():
    today = datetime.date.today()
    dates = []
    for i in range(14):
        day = today + datetime.timedelta(days=i)
        if day.weekday() in [0, 1, 3, 4, 5]:  # –ü–Ω, –í—Ç, –ß—Ç, –ü—Ç, –°–±
            dates.append([KeyboardButton(text=day.strftime("%Y-%m-%d"))])
    dates.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=dates, resize_keyboard=True)

def time_keyboard(date, service_minutes):
    times = []
    for h in range(9, 19):
        for m in (0, 30):
            start = datetime.time(hour=h, minute=m)
            start_minutes = h * 60 + m
            end_minutes = start_minutes + service_minutes

            if end_minutes > 19 * 60:  # –º–∞—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 19:00
                continue

            start_str = start.strftime("%H:%M")
            if is_time_range_available(date, start_str, service_minutes):
                times.append([KeyboardButton(text=start_str)])

    if not times:
        times = [[KeyboardButton(text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")]]
    times.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=times, resize_keyboard=True)

# ---------- –°—Ç–∞—Ä—Ç ----------
@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# ---------- –ó–∞–ø–∏—Å—å: —Å—Ç–∞—Ä—Ç ----------
@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def book(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=service_keyboard())
    await state.set_state(BookingStates.choosing_service)

# ---------- –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ ----------
@router.message(BookingStates.choosing_service)
async def choose_service(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return

    if message.text not in services:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(service=message.text)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-09-01",
        reply_markup=date_keyboard()
    )
    await state.set_state(BookingStates.choosing_date)

# ---------- –í—ã–±–æ—Ä –¥–∞—Ç—ã (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥) ----------
@router.message(BookingStates.choosing_date)
async def choose_date(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=service_keyboard())
        await state.set_state(BookingStates.choosing_service)
        return

    try:
        selected_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-09-01")
        return

    if selected_date < datetime.date.today():
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
        return

    await state.update_data(date=message.text)
    data = await state.get_data()
    duration = services[data['service']]

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=time_keyboard(message.text, duration)
    )
    await state.set_state(BookingStates.choosing_time)

# ---------- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ----------
@router.message(BookingStates.choosing_time)
async def choose_time(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-09-01",
            reply_markup=date_keyboard()
        )
        await state.set_state(BookingStates.choosing_date)
        return

    try:
        datetime.datetime.strptime(message.text, "%H:%M")
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(time=message.text)
    data = await state.get_data()

    duration = services[data['service']]
    if not is_time_range_available(data["date"], data["time"], duration):
        await message.answer("‚õî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.")
        return

    save_appointment(
        user_id=message.from_user.id,
        username=message.from_user.username or "unknown",
        service=data["service"],
        date=data["date"],
        time=data["time"]
    )

    record = f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n–£—Å–ª—É–≥–∞: {data['service']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}"
    await message.answer(record, reply_markup=main_menu())
    await state.clear()

# ---------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π ----------
@router.message(F.text == "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_my_appointments(message: Message):
    records = get_user_appointments(message.from_user.id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for service, date, time in records:
        text += f"‚Ä¢ {service} ‚Äî {date} –≤ {time}\n"
    await message.answer(text)

# ---------- –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ ----------
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_booking(message: Message, state: FSMContext):
    records = get_user_appointments(message.from_user.id)
    if not records:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    keyboard = [[KeyboardButton(text=f"{service} ‚Äî {date} –≤ {time}")]
                for service, date, time in records]
    keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:", reply_markup=ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    ))
    await state.set_state(BookingStates.confirming)

# ---------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã ----------
@router.message(BookingStates.confirming)
async def confirm_cancel(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        await state.clear()
        return

    try:
        parts = message.text.split(" ‚Äî ")
        service = parts[0]
        date, time = parts[1].split(" –≤ ")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    delete_user_appointment(message.from_user.id, service, date, time)
    await message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
    await state.clear()
